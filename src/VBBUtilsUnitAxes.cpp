/* Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * Copyright Â© 2023 Richard S. Wright Jr. (richard@lunarg.com)
 *
 * This software is part of the Vulkan Building Blocks
 */

#include "VBBDevice.h"
#include "VBBUtils.h"
#include "VBBUtilsUnitAxes.h"


static unsigned char StockShader_FakeLight_vert_spv[] = {
    0x03, 0x02, 0x23, 0x07, 0x00, 0x00, 0x01, 0x00, 0x0b, 0x00, 0x0d, 0x00,
    0x4e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x02, 0x00,
    0x01, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x06, 0x00, 0x01, 0x00, 0x00, 0x00,
    0x47, 0x4c, 0x53, 0x4c, 0x2e, 0x73, 0x74, 0x64, 0x2e, 0x34, 0x35, 0x30,
    0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x01, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x04, 0x00, 0x00, 0x00, 0x6d, 0x61, 0x69, 0x6e, 0x00, 0x00, 0x00, 0x00,
    0x31, 0x00, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00, 0x39, 0x00, 0x00, 0x00,
    0x42, 0x00, 0x00, 0x00, 0x46, 0x00, 0x00, 0x00, 0x03, 0x00, 0x03, 0x00,
    0x02, 0x00, 0x00, 0x00, 0xc2, 0x01, 0x00, 0x00, 0x04, 0x00, 0x0a, 0x00,
    0x47, 0x4c, 0x5f, 0x47, 0x4f, 0x4f, 0x47, 0x4c, 0x45, 0x5f, 0x63, 0x70,
    0x70, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x65,
    0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x00, 0x00,
    0x04, 0x00, 0x08, 0x00, 0x47, 0x4c, 0x5f, 0x47, 0x4f, 0x4f, 0x47, 0x4c,
    0x45, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x64, 0x69,
    0x72, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x00, 0x05, 0x00, 0x04, 0x00,
    0x04, 0x00, 0x00, 0x00, 0x6d, 0x61, 0x69, 0x6e, 0x00, 0x00, 0x00, 0x00,
    0x05, 0x00, 0x03, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x72, 0x6f, 0x74, 0x00,
    0x05, 0x00, 0x03, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x50, 0x43, 0x00, 0x00,
    0x06, 0x00, 0x06, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x6d, 0x76, 0x70, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x00, 0x00, 0x00,
    0x06, 0x00, 0x05, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
    0x70, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x00, 0x00, 0x05, 0x00, 0x06, 0x00,
    0x0f, 0x00, 0x00, 0x00, 0x50, 0x75, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x73,
    0x74, 0x61, 0x6e, 0x74, 0x73, 0x00, 0x00, 0x00, 0x05, 0x00, 0x04, 0x00,
    0x31, 0x00, 0x00, 0x00, 0x76, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x00,
    0x05, 0x00, 0x05, 0x00, 0x34, 0x00, 0x00, 0x00, 0x69, 0x6e, 0x4e, 0x6f,
    0x72, 0x6d, 0x61, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x04, 0x00,
    0x39, 0x00, 0x00, 0x00, 0x76, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x00, 0x00,
    0x05, 0x00, 0x06, 0x00, 0x40, 0x00, 0x00, 0x00, 0x67, 0x6c, 0x5f, 0x50,
    0x65, 0x72, 0x56, 0x65, 0x72, 0x74, 0x65, 0x78, 0x00, 0x00, 0x00, 0x00,
    0x06, 0x00, 0x06, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x67, 0x6c, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x00,
    0x06, 0x00, 0x07, 0x00, 0x40, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
    0x67, 0x6c, 0x5f, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x69, 0x7a, 0x65,
    0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x07, 0x00, 0x40, 0x00, 0x00, 0x00,
    0x02, 0x00, 0x00, 0x00, 0x67, 0x6c, 0x5f, 0x43, 0x6c, 0x69, 0x70, 0x44,
    0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x00, 0x06, 0x00, 0x07, 0x00,
    0x40, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x67, 0x6c, 0x5f, 0x43,
    0x75, 0x6c, 0x6c, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x00,
    0x05, 0x00, 0x03, 0x00, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x05, 0x00, 0x05, 0x00, 0x46, 0x00, 0x00, 0x00, 0x69, 0x6e, 0x50, 0x6f,
    0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x00, 0x00, 0x48, 0x00, 0x04, 0x00,
    0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
    0x48, 0x00, 0x05, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00,
    0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
    0x10, 0x00, 0x00, 0x00, 0x48, 0x00, 0x04, 0x00, 0x0d, 0x00, 0x00, 0x00,
    0x01, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00,
    0x0d, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00,
    0x40, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00, 0x0d, 0x00, 0x00, 0x00,
    0x01, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
    0x47, 0x00, 0x03, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
    0x47, 0x00, 0x04, 0x00, 0x31, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00,
    0x01, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x34, 0x00, 0x00, 0x00,
    0x1e, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00,
    0x39, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x48, 0x00, 0x05, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00,
    0x40, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00,
    0x01, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00, 0x40, 0x00, 0x00, 0x00,
    0x02, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
    0x48, 0x00, 0x05, 0x00, 0x40, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
    0x0b, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x47, 0x00, 0x03, 0x00,
    0x40, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00,
    0x46, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x13, 0x00, 0x02, 0x00, 0x02, 0x00, 0x00, 0x00, 0x21, 0x00, 0x03, 0x00,
    0x03, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x16, 0x00, 0x03, 0x00,
    0x06, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x17, 0x00, 0x04, 0x00,
    0x07, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
    0x18, 0x00, 0x04, 0x00, 0x08, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
    0x03, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x09, 0x00, 0x00, 0x00,
    0x07, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x17, 0x00, 0x04, 0x00,
    0x0b, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
    0x18, 0x00, 0x04, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00,
    0x04, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x04, 0x00, 0x0d, 0x00, 0x00, 0x00,
    0x0c, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00,
    0x0e, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00,
    0x3b, 0x00, 0x04, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00,
    0x09, 0x00, 0x00, 0x00, 0x15, 0x00, 0x04, 0x00, 0x10, 0x00, 0x00, 0x00,
    0x20, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00,
    0x10, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
    0x2b, 0x00, 0x04, 0x00, 0x10, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x13, 0x00, 0x00, 0x00,
    0x09, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00,
    0x10, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
    0x2b, 0x00, 0x04, 0x00, 0x06, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x80, 0x3f, 0x2b, 0x00, 0x04, 0x00, 0x06, 0x00, 0x00, 0x00,
    0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00,
    0x30, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
    0x3b, 0x00, 0x04, 0x00, 0x30, 0x00, 0x00, 0x00, 0x31, 0x00, 0x00, 0x00,
    0x03, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x33, 0x00, 0x00, 0x00,
    0x01, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00,
    0x33, 0x00, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
    0x20, 0x00, 0x04, 0x00, 0x38, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
    0x0b, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x38, 0x00, 0x00, 0x00,
    0x39, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00,
    0x10, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
    0x15, 0x00, 0x04, 0x00, 0x3d, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x3d, 0x00, 0x00, 0x00,
    0x3e, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x04, 0x00,
    0x3f, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00,
    0x1e, 0x00, 0x06, 0x00, 0x40, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00,
    0x06, 0x00, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x00,
    0x20, 0x00, 0x04, 0x00, 0x41, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
    0x40, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x41, 0x00, 0x00, 0x00,
    0x42, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00,
    0x43, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00,
    0x3b, 0x00, 0x04, 0x00, 0x33, 0x00, 0x00, 0x00, 0x46, 0x00, 0x00, 0x00,
    0x01, 0x00, 0x00, 0x00, 0x36, 0x00, 0x05, 0x00, 0x02, 0x00, 0x00, 0x00,
    0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
    0xf8, 0x00, 0x02, 0x00, 0x05, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00,
    0x09, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
    0x41, 0x00, 0x06, 0x00, 0x13, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00,
    0x0f, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00,
    0x3d, 0x00, 0x04, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x00,
    0x14, 0x00, 0x00, 0x00, 0x4f, 0x00, 0x08, 0x00, 0x07, 0x00, 0x00, 0x00,
    0x16, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
    0x0c, 0x00, 0x06, 0x00, 0x07, 0x00, 0x00, 0x00, 0x17, 0x00, 0x00, 0x00,
    0x01, 0x00, 0x00, 0x00, 0x45, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00,
    0x41, 0x00, 0x06, 0x00, 0x13, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,
    0x0f, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00,
    0x3d, 0x00, 0x04, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00,
    0x18, 0x00, 0x00, 0x00, 0x4f, 0x00, 0x08, 0x00, 0x07, 0x00, 0x00, 0x00,
    0x1a, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
    0x0c, 0x00, 0x06, 0x00, 0x07, 0x00, 0x00, 0x00, 0x1b, 0x00, 0x00, 0x00,
    0x01, 0x00, 0x00, 0x00, 0x45, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00,
    0x41, 0x00, 0x06, 0x00, 0x13, 0x00, 0x00, 0x00, 0x1d, 0x00, 0x00, 0x00,
    0x0f, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00,
    0x3d, 0x00, 0x04, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00,
    0x1d, 0x00, 0x00, 0x00, 0x4f, 0x00, 0x08, 0x00, 0x07, 0x00, 0x00, 0x00,
    0x1f, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
    0x0c, 0x00, 0x06, 0x00, 0x07, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
    0x01, 0x00, 0x00, 0x00, 0x45, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00,
    0x51, 0x00, 0x05, 0x00, 0x06, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00,
    0x17, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00,
    0x06, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x17, 0x00, 0x00, 0x00,
    0x01, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x06, 0x00, 0x00, 0x00,
    0x25, 0x00, 0x00, 0x00, 0x17, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
    0x51, 0x00, 0x05, 0x00, 0x06, 0x00, 0x00, 0x00, 0x26, 0x00, 0x00, 0x00,
    0x1b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00,
    0x06, 0x00, 0x00, 0x00, 0x27, 0x00, 0x00, 0x00, 0x1b, 0x00, 0x00, 0x00,
    0x01, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x06, 0x00, 0x00, 0x00,
    0x28, 0x00, 0x00, 0x00, 0x1b, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
    0x51, 0x00, 0x05, 0x00, 0x06, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00,
    0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00,
    0x06, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
    0x01, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x06, 0x00, 0x00, 0x00,
    0x2b, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
    0x50, 0x00, 0x06, 0x00, 0x07, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00,
    0x23, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00,
    0x50, 0x00, 0x06, 0x00, 0x07, 0x00, 0x00, 0x00, 0x2d, 0x00, 0x00, 0x00,
    0x26, 0x00, 0x00, 0x00, 0x27, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00,
    0x50, 0x00, 0x06, 0x00, 0x07, 0x00, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x00,
    0x29, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x00, 0x00,
    0x50, 0x00, 0x06, 0x00, 0x08, 0x00, 0x00, 0x00, 0x2f, 0x00, 0x00, 0x00,
    0x2c, 0x00, 0x00, 0x00, 0x2d, 0x00, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x00,
    0x3e, 0x00, 0x03, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x2f, 0x00, 0x00, 0x00,
    0x3d, 0x00, 0x04, 0x00, 0x08, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00,
    0x0a, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00,
    0x35, 0x00, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x06, 0x00,
    0x07, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
    0x45, 0x00, 0x00, 0x00, 0x35, 0x00, 0x00, 0x00, 0x91, 0x00, 0x05, 0x00,
    0x07, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00,
    0x36, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x03, 0x00, 0x31, 0x00, 0x00, 0x00,
    0x37, 0x00, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0x13, 0x00, 0x00, 0x00,
    0x3b, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00,
    0x3a, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x0b, 0x00, 0x00, 0x00,
    0x3c, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x03, 0x00,
    0x39, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x41, 0x00, 0x05, 0x00,
    0x43, 0x00, 0x00, 0x00, 0x44, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00,
    0x12, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x0c, 0x00, 0x00, 0x00,
    0x45, 0x00, 0x00, 0x00, 0x44, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00,
    0x07, 0x00, 0x00, 0x00, 0x47, 0x00, 0x00, 0x00, 0x46, 0x00, 0x00, 0x00,
    0x51, 0x00, 0x05, 0x00, 0x06, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00,
    0x47, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00,
    0x06, 0x00, 0x00, 0x00, 0x49, 0x00, 0x00, 0x00, 0x47, 0x00, 0x00, 0x00,
    0x01, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x06, 0x00, 0x00, 0x00,
    0x4a, 0x00, 0x00, 0x00, 0x47, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
    0x50, 0x00, 0x07, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x4b, 0x00, 0x00, 0x00,
    0x48, 0x00, 0x00, 0x00, 0x49, 0x00, 0x00, 0x00, 0x4a, 0x00, 0x00, 0x00,
    0x21, 0x00, 0x00, 0x00, 0x91, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00,
    0x4c, 0x00, 0x00, 0x00, 0x45, 0x00, 0x00, 0x00, 0x4b, 0x00, 0x00, 0x00,
    0x41, 0x00, 0x05, 0x00, 0x38, 0x00, 0x00, 0x00, 0x4d, 0x00, 0x00, 0x00,
    0x42, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x03, 0x00,
    0x4d, 0x00, 0x00, 0x00, 0x4c, 0x00, 0x00, 0x00, 0xfd, 0x00, 0x01, 0x00,
    0x38, 0x00, 0x01, 0x00
};
static unsigned int StockShader_FakeLight_vert_spv_len = 2272;

/*
#version 450
// Fake light... just shades geometry as if the light were coming
// from the viewer. It's just a simple default 3D effect. Requires
// geometry have surface normals, and a solid color.


layout(location = 0) in vec4 vColor;
layout(location = 1) in vec3 vNormal;


// Output color
layout(location = 0) out vec4 vFragColor;

void main(void) {
  vec3 vLightDir = vec3(0.0, 0.0, 1.0); // Always from view direction

 // This lights the back as well as the front
 float fDot = abs(dot(vLightDir, vNormal));

 vFragColor = vec4(fDot, fDot, fDot, 1.0) * vColor;
 }
*/

static unsigned char StockShader_FakeLight_frag_spv[] = {
    0x03, 0x02, 0x23, 0x07, 0x00, 0x00, 0x01, 0x00, 0x0b, 0x00, 0x0d, 0x00,
    0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x02, 0x00,
    0x01, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x06, 0x00, 0x01, 0x00, 0x00, 0x00,
    0x47, 0x4c, 0x53, 0x4c, 0x2e, 0x73, 0x74, 0x64, 0x2e, 0x34, 0x35, 0x30,
    0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x01, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x08, 0x00, 0x04, 0x00, 0x00, 0x00,
    0x04, 0x00, 0x00, 0x00, 0x6d, 0x61, 0x69, 0x6e, 0x00, 0x00, 0x00, 0x00,
    0x11, 0x00, 0x00, 0x00, 0x17, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00,
    0x10, 0x00, 0x03, 0x00, 0x04, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
    0x03, 0x00, 0x03, 0x00, 0x02, 0x00, 0x00, 0x00, 0xc2, 0x01, 0x00, 0x00,
    0x04, 0x00, 0x0a, 0x00, 0x47, 0x4c, 0x5f, 0x47, 0x4f, 0x4f, 0x47, 0x4c,
    0x45, 0x5f, 0x63, 0x70, 0x70, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f,
    0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
    0x76, 0x65, 0x00, 0x00, 0x04, 0x00, 0x08, 0x00, 0x47, 0x4c, 0x5f, 0x47,
    0x4f, 0x4f, 0x47, 0x4c, 0x45, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
    0x65, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x00,
    0x05, 0x00, 0x04, 0x00, 0x04, 0x00, 0x00, 0x00, 0x6d, 0x61, 0x69, 0x6e,
    0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x05, 0x00, 0x09, 0x00, 0x00, 0x00,
    0x76, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x44, 0x69, 0x72, 0x00, 0x00, 0x00,
    0x05, 0x00, 0x04, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x66, 0x44, 0x6f, 0x74,
    0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x04, 0x00, 0x11, 0x00, 0x00, 0x00,
    0x76, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x00, 0x05, 0x00, 0x05, 0x00,
    0x17, 0x00, 0x00, 0x00, 0x76, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c,
    0x6f, 0x72, 0x00, 0x00, 0x05, 0x00, 0x04, 0x00, 0x1e, 0x00, 0x00, 0x00,
    0x76, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00,
    0x11, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
    0x47, 0x00, 0x04, 0x00, 0x17, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x1e, 0x00, 0x00, 0x00,
    0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0x00, 0x02, 0x00,
    0x02, 0x00, 0x00, 0x00, 0x21, 0x00, 0x03, 0x00, 0x03, 0x00, 0x00, 0x00,
    0x02, 0x00, 0x00, 0x00, 0x16, 0x00, 0x03, 0x00, 0x06, 0x00, 0x00, 0x00,
    0x20, 0x00, 0x00, 0x00, 0x17, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00,
    0x06, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00,
    0x08, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
    0x2b, 0x00, 0x04, 0x00, 0x06, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x06, 0x00, 0x00, 0x00,
    0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xbf, 0x2c, 0x00, 0x06, 0x00,
    0x07, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00,
    0x0a, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00,
    0x0d, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00,
    0x20, 0x00, 0x04, 0x00, 0x10, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
    0x07, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x10, 0x00, 0x00, 0x00,
    0x11, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x17, 0x00, 0x04, 0x00,
    0x15, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
    0x20, 0x00, 0x04, 0x00, 0x16, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
    0x15, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x16, 0x00, 0x00, 0x00,
    0x17, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00,
    0x06, 0x00, 0x00, 0x00, 0x1b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f,
    0x20, 0x00, 0x04, 0x00, 0x1d, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
    0x15, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x1d, 0x00, 0x00, 0x00,
    0x1e, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x36, 0x00, 0x05, 0x00,
    0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x03, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x05, 0x00, 0x00, 0x00,
    0x3b, 0x00, 0x04, 0x00, 0x08, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00,
    0x07, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x0d, 0x00, 0x00, 0x00,
    0x0e, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x03, 0x00,
    0x09, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00,
    0x07, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00,
    0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00,
    0x11, 0x00, 0x00, 0x00, 0x94, 0x00, 0x05, 0x00, 0x06, 0x00, 0x00, 0x00,
    0x13, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00,
    0x0c, 0x00, 0x06, 0x00, 0x06, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00,
    0x01, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00,
    0x3e, 0x00, 0x03, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00,
    0x3d, 0x00, 0x04, 0x00, 0x06, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,
    0x0e, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x06, 0x00, 0x00, 0x00,
    0x19, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00,
    0x06, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00,
    0x50, 0x00, 0x07, 0x00, 0x15, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00,
    0x18, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00,
    0x1b, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x15, 0x00, 0x00, 0x00,
    0x1f, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00,
    0x15, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00,
    0x1f, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x03, 0x00, 0x17, 0x00, 0x00, 0x00,
    0x20, 0x00, 0x00, 0x00, 0xfd, 0x00, 0x01, 0x00, 0x38, 0x00, 0x01, 0x00
};
static unsigned int StockShader_FakeLight_frag_spv_len = 900;


// ********************************************************************
// Destroy the fence
VBBUtilsUnitAxes::~VBBUtilsUnitAxes(void) {

    // Hold on there sonny boy... we can't be deleting objects that may
    // still be in use
    if (m_pCanvas) vkQueueWaitIdle(m_pCanvas->getQueue());

    delete pPipeline;

    delete pVertexBufferSphere;
    delete pNormalBufferSphere;
    delete pIndexBufferSphere;

    delete pVertexBufferCylinder;
    delete pNormalBufferCylinder;
    delete pIndexBufferCylinder;

    delete pVertexBufferDisk;
    delete pNormalBufferDisk;
    delete pIndexBufferDisk;

    delete pVertexBufferCone;
    delete pNormalBufferCone;
    delete pIndexBufferCone;
}


// *********************************************************************
// Create the axes
VkResult VBBUtilsUnitAxes::createAxes(VBBCanvas* pCanvas)
{
    m_pCanvas = pCanvas;

    // Going to draw triangles
    pPipeline = new VBBPipelineGraphics();

            // What does the attribute data look like, and what is it's location
    pPipeline->addVertexAttributeBinding(sizeof(float)*3, VK_VERTEX_INPUT_RATE_VERTEX, 0, VK_FORMAT_R32G32B32_SFLOAT);
    pPipeline->addVertexAttributeBinding(sizeof(float)*3, VK_VERTEX_INPUT_RATE_VERTEX, 1, VK_FORMAT_R32G32B32_SFLOAT);

    // Push constants are SO FREAKING EASY
    VkPushConstantRange pushConstant;
    pushConstant.offset = 0;
    pushConstant.size = (sizeof(pushConstantDef));
    pushConstant.stageFlags = VK_SHADER_STAGE_VERTEX_BIT;

    VBBShaderModule vertexShader;
    vertexShader.loadSPIRVSrc(m_pCanvas->getLogicalDevice(), StockShader_FakeLight_vert_spv, StockShader_FakeLight_vert_spv_len);

    VBBShaderModule fragmentShader;
    fragmentShader.loadSPIRVSrc(m_pCanvas->getLogicalDevice(), StockShader_FakeLight_frag_spv, StockShader_FakeLight_frag_spv_len);

    pPipeline->setPushConstants(1, &pushConstant);

    pPipeline->setPrimitiveTopology(VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST);
    pPipeline->setFrontFace(VK_FRONT_FACE_COUNTER_CLOCKWISE);
    pPipeline->setCullMode(VK_CULL_MODE_BACK_BIT);
    pPipeline->setPolygonMode(VK_POLYGON_MODE_FILL);
    pPipeline->setEnableDepthTest(VK_TRUE);
    pPipeline->setEnableDepthWrite(VK_TRUE);

    lastResult = pPipeline->createPipeline(m_pCanvas, vertexShader.getShaderModule(), fragmentShader.getShaderModule());
    if(lastResult != VK_SUCCESS)
        return lastResult;

    // Build a mesh
    VBBSimpleIndexedMesh sphere, cylinder, disk, cone;
    VBBMakeSphere(sphere, sphereSize, 52, 26);
    VBBMakeCylinder(cylinder, cylinderRadius, cylinderRadius, cylinderLength, 50, 100);
    VBBMakeDisk(disk, 0.0f, diskRadius, 50, 2);
    VBBMakeCylinder(cone, 0, diskRadius, coneHeight, 50, 5);

            // ***************************************************************
            // Sphere
    indexCountSphere = sphere.getIndexCount();
    attribCountSphere = sphere.getAttributeCount();

    pVertexBufferSphere = new VBBBufferStatic(m_pCanvas->getVMA());
    lastResult = pVertexBufferSphere->createBuffer(sphere.getVertexPointer(),
                            sizeof(float)*3*attribCountSphere, m_pCanvas->getDevice());

    pNormalBufferSphere = new VBBBufferStatic(m_pCanvas->getVMA());
    lastResult = pNormalBufferSphere->createBuffer(sphere.getIndexPointer(), sizeof(float)*3*attribCountSphere, m_pCanvas->getDevice());

    pIndexBufferSphere = new VBBBufferStatic(m_pCanvas->getVMA());
    lastResult = pIndexBufferSphere->createBuffer(sphere.getIndexPointer(), sizeof(uint32_t)*indexCountSphere, m_pCanvas->getDevice());
    // ***************************************************************

            // ***************************************************************
            // Cylinder
    indexCountCylinder = cylinder.getIndexCount();
    attribCountCylinder = cylinder.getAttributeCount();

    pVertexBufferCylinder = new VBBBufferStatic(m_pCanvas->getVMA());
    lastResult = pVertexBufferCylinder->createBuffer(cylinder.getVertexPointer(), sizeof(float)*3*attribCountCylinder, m_pCanvas->getDevice());

    pNormalBufferCylinder = new VBBBufferStatic(m_pCanvas->getVMA());
    lastResult = pNormalBufferCylinder->createBuffer(cylinder.getNormalPointer(), sizeof(float)*3*attribCountCylinder, m_pCanvas->getDevice());

    pIndexBufferCylinder = new VBBBufferStatic(m_pCanvas->getVMA());
    lastResult = pIndexBufferCylinder->createBuffer(cylinder.getIndexPointer(), sizeof(uint32_t)*indexCountCylinder, m_pCanvas->getDevice());


    // ***************************************************************
    // Disk
    indexCountDisk = disk.getIndexCount();
    attribCountDisk = disk.getAttributeCount();

    pVertexBufferDisk = new VBBBufferStatic(m_pCanvas->getVMA());
    lastResult = pVertexBufferDisk->createBuffer(disk.getVertexPointer(), sizeof(float)*3*attribCountDisk, m_pCanvas->getDevice());

    pNormalBufferDisk = new VBBBufferStatic(m_pCanvas->getVMA());
    lastResult = pNormalBufferDisk->createBuffer(disk.getNormalPointer(), sizeof(float)*3*attribCountDisk, m_pCanvas->getDevice());

    pIndexBufferDisk = new VBBBufferStatic(m_pCanvas->getVMA());
    lastResult = pIndexBufferDisk->createBuffer(disk.getIndexPointer(), sizeof(uint32_t)*indexCountDisk, m_pCanvas->getDevice());

            // ***************************************************************
            // Cone
    indexCountCone = cone.getIndexCount();
    attribCountCone = cone.getAttributeCount();

    pVertexBufferCone = new VBBBufferStatic(m_pCanvas->getVMA());
    lastResult = pVertexBufferCone->createBuffer(cone.getVertexPointer(), sizeof(float)*3*attribCountCone, m_pCanvas->getDevice());

    pNormalBufferCone = new VBBBufferStatic(m_pCanvas->getVMA());
    lastResult = pNormalBufferCone->createBuffer(cone.getNormalPointer(), sizeof(float)*3*attribCountCone, m_pCanvas->getDevice());

    pIndexBufferCone = new VBBBufferStatic(m_pCanvas->getVMA());
    lastResult = pIndexBufferCone->createBuffer(cone.getIndexPointer(), sizeof(uint32_t)*indexCountCone, m_pCanvas->getDevice());


    return VK_SUCCESS;
}

void VBBUtilsUnitAxes::packagePushConstants(pushConstantDef& pc, glm::mat4& modelView, glm::mat4& mvp)
{

    memcpy(pc.mvp, glm::value_ptr(mvp), sizeof(float)*16);

            // Used to transform normals
    pc.packMatrix[0] = glm::value_ptr(modelView)[0];
    pc.packMatrix[1] = glm::value_ptr(modelView)[1];
    pc.packMatrix[2] = glm::value_ptr(modelView)[2];

    pc.packMatrix[4] = glm::value_ptr(modelView)[4];
    pc.packMatrix[5] = glm::value_ptr(modelView)[5];
    pc.packMatrix[6] = glm::value_ptr(modelView)[6];

    pc.packMatrix[8] = glm::value_ptr(modelView)[8];
    pc.packMatrix[9] = glm::value_ptr(modelView)[9];
    pc.packMatrix[10] = glm::value_ptr(modelView)[10];
}

void VBBUtilsUnitAxes::drawCylinder(VkCommandBuffer cmdBuffer)
{
    // Bind to geometry attribute data and draw
    VkBuffer vertexBuffers[] = { pVertexBufferCylinder->getBuffer() };
    VkDeviceSize offsets[] = {0};
    vkCmdBindVertexBuffers(cmdBuffer, 0, 1, vertexBuffers, offsets);

    VkBuffer normalBuffers[] = { pNormalBufferCylinder->getBuffer() };
    vkCmdBindVertexBuffers(cmdBuffer, 1, 1, normalBuffers, offsets);

    vkCmdBindIndexBuffer(cmdBuffer, pIndexBufferCylinder->getBuffer(), 0, VK_INDEX_TYPE_UINT32);
    vkCmdDrawIndexed(cmdBuffer, indexCountCylinder, 1, 0, 0, 0);
}

void VBBUtilsUnitAxes::drawSphere(VkCommandBuffer cmdBuffer)
{
    // Bind to geometry attribute data and draw
    VkBuffer vertexBuffers[] = { pVertexBufferSphere->getBuffer() };
    VkDeviceSize offsets[] = {0};
    vkCmdBindVertexBuffers(cmdBuffer, 0, 1, vertexBuffers, offsets);

    VkBuffer normalBuffers[] = { pNormalBufferSphere->getBuffer() };
    vkCmdBindVertexBuffers(cmdBuffer, 1, 1, normalBuffers, offsets);

    vkCmdBindIndexBuffer(cmdBuffer, pIndexBufferSphere->getBuffer(), 0, VK_INDEX_TYPE_UINT32);
    vkCmdDrawIndexed(cmdBuffer, indexCountSphere, 1, 0, 0, 0);
}

void VBBUtilsUnitAxes::drawDisk(VkCommandBuffer cmdBuffer)
{
    // Bind to geometry attribute data and draw
    VkBuffer vertexBuffers[] = { pVertexBufferDisk->getBuffer() };
    VkDeviceSize offsets[] = {0};
    vkCmdBindVertexBuffers(cmdBuffer, 0, 1, vertexBuffers, offsets);

    VkBuffer normalBuffers[] = { pNormalBufferDisk->getBuffer() };
    vkCmdBindVertexBuffers(cmdBuffer, 1, 1, normalBuffers, offsets);

    vkCmdBindIndexBuffer(cmdBuffer, pIndexBufferDisk->getBuffer(), 0, VK_INDEX_TYPE_UINT32);
    vkCmdDrawIndexed(cmdBuffer, indexCountDisk, 1, 0, 0, 0);
}

void VBBUtilsUnitAxes::drawCone(VkCommandBuffer cmdBuffer)
{
    // Bind to geometry attribute data and draw
    VkBuffer vertexBuffers[] = { pVertexBufferCone->getBuffer() };
    VkDeviceSize offsets[] = {0};
    vkCmdBindVertexBuffers(cmdBuffer, 0, 1, vertexBuffers, offsets);

    VkBuffer normalBuffers[] = { pNormalBufferCone->getBuffer() };
    vkCmdBindVertexBuffers(cmdBuffer, 1, 1, normalBuffers, offsets);

    vkCmdBindIndexBuffer(cmdBuffer, pIndexBufferCone->getBuffer(), 0, VK_INDEX_TYPE_UINT32);
    vkCmdDrawIndexed(cmdBuffer, indexCountCone, 1, 0, 0, 0);
}

VkResult VBBUtilsUnitAxes::renderAxes(glm::mat4& modelView, glm::mat4& proj, VkCommandBuffer cmdBuffer)
{

            // Bind to the pipeline that we want to use
    vkCmdBindPipeline(cmdBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, pPipeline->getPipeline());


            // We use this for everything
    pushConstantDef pc;

    glm::mat4   rootModelView = modelView;

    glm::mat4 mvp = proj * rootModelView;
    packagePushConstants(pc, modelView, mvp);

            // White sphere
    pc.packMatrix[12] = 1.0f;
    pc.packMatrix[13] = 1.0f;
    pc.packMatrix[14] = 1.0f;
    pc.packMatrix[15] = 1.0f;
    vkCmdPushConstants(cmdBuffer, pPipeline->getPipelineLayout(), VK_SHADER_STAGE_VERTEX_BIT, 0, sizeof(pushConstantDef), &pc);

            // Bind to geometry attribute data and draw
    drawSphere(cmdBuffer);


            // Blue Z-Axis *****************************************
    pc.packMatrix[12] = 0.0f;
    pc.packMatrix[13] = 0.0f;
    pc.packMatrix[14] = 1.0f;
    pc.packMatrix[15] = 1.0f;
    vkCmdPushConstants(cmdBuffer, pPipeline->getPipelineLayout(), VK_SHADER_STAGE_VERTEX_BIT, 0, sizeof(pushConstantDef), &pc);
    drawCylinder(cmdBuffer);

            // Cone base - disk
    modelView = glm::translate(modelView, glm::vec3(0.0f, 0.0f, cylinderLength));
    modelView = glm::rotate(modelView, glm::radians(180.0f), glm::vec3(1.0f, 0.0f, 0.0f));
    mvp = proj * modelView;
    packagePushConstants(pc, modelView, mvp);
    vkCmdPushConstants(cmdBuffer, pPipeline->getPipelineLayout(), VK_SHADER_STAGE_VERTEX_BIT, 0, sizeof(pushConstantDef), &pc);
    drawDisk(cmdBuffer);

            // Cone at end
    modelView = glm::translate(modelView, glm::vec3(0.0f, 0.0f, -(1.0f - cylinderLength)));
    mvp = proj * modelView;
    packagePushConstants(pc, modelView, mvp);
    vkCmdPushConstants(cmdBuffer, pPipeline->getPipelineLayout(), VK_SHADER_STAGE_VERTEX_BIT, 0, sizeof(pushConstantDef), &pc);
    drawCone(cmdBuffer);


            // Red X-Axis *************************************************
    modelView = glm::rotate(rootModelView, glm::radians(90.0f), glm::vec3(0.0f, 1.0f, 0.0f));
    mvp = proj * modelView;
    packagePushConstants(pc, modelView, mvp);

    pc.packMatrix[12] = 1.0f;
    pc.packMatrix[13] = 0.0f;
    pc.packMatrix[14] = 0.0f;
    pc.packMatrix[15] = 1.0f;
    vkCmdPushConstants(cmdBuffer, pPipeline->getPipelineLayout(), VK_SHADER_STAGE_VERTEX_BIT, 0, sizeof(pushConstantDef), &pc);
    drawCylinder(cmdBuffer);

    modelView = glm::rotate(modelView, glm::radians(180.0f), glm::vec3(1.0f, 0.0f, 0.0f));
    modelView = glm::translate(modelView, glm::vec3(0.0, 0.0f, -cylinderLength));
    mvp = proj * modelView;
    packagePushConstants(pc, modelView, mvp);
    vkCmdPushConstants(cmdBuffer, pPipeline->getPipelineLayout(), VK_SHADER_STAGE_VERTEX_BIT, 0, sizeof(pushConstantDef), &pc);
    drawDisk(cmdBuffer);

    modelView = glm::translate(modelView, glm::vec3(0.0f, 0.0f, -(1.0f - cylinderLength)));
    mvp = proj * modelView;
    packagePushConstants(pc, modelView, mvp);
    vkCmdPushConstants(cmdBuffer, pPipeline->getPipelineLayout(), VK_SHADER_STAGE_VERTEX_BIT, 0, sizeof(pushConstantDef), &pc);
    drawCone(cmdBuffer);

            // Green Y-Axis **********************************************
    modelView = glm::rotate(rootModelView, glm::radians(90.0f), glm::vec3(-1.0f, 0.0f, 0.0f));
    mvp = proj * modelView;
    packagePushConstants(pc, modelView, mvp);

    pc.packMatrix[12] = 0.0f;
    pc.packMatrix[13] = 1.0f;
    pc.packMatrix[14] = 0.0f;
    pc.packMatrix[15] = 1.0f;
    vkCmdPushConstants(cmdBuffer, pPipeline->getPipelineLayout(), VK_SHADER_STAGE_VERTEX_BIT, 0, sizeof(pushConstantDef), &pc);

    // Bind to geometry attribute data and draw
    drawCylinder(cmdBuffer);
    modelView = glm::rotate(modelView, glm::radians(180.0f), glm::vec3(1.0f, 0.0f, 0.0f));
    modelView = glm::translate(modelView, glm::vec3(0.0, 0.0f, -cylinderLength));
    mvp = proj * modelView;
    packagePushConstants(pc, modelView, mvp);
    vkCmdPushConstants(cmdBuffer, pPipeline->getPipelineLayout(), VK_SHADER_STAGE_VERTEX_BIT, 0, sizeof(pushConstantDef), &pc);
    drawDisk(cmdBuffer);

    modelView = glm::translate(modelView, glm::vec3(0.0f, 0.0f, -(1.0f - cylinderLength)));
    mvp = proj * modelView;
    packagePushConstants(pc, modelView, mvp);
    vkCmdPushConstants(cmdBuffer, pPipeline->getPipelineLayout(), VK_SHADER_STAGE_VERTEX_BIT, 0, sizeof(pushConstantDef), &pc);
    drawCone(cmdBuffer);

    return VK_SUCCESS;
}

