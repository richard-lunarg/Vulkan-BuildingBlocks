//
//  main.m
//  VulkanRocks
//
//  Created by LunarG on 7/20/23.
//
#include <iostream>
#define VMA_IMPLEMENTATION          // This only goes in one source file
#define VMA_STATIC_VULKAN_FUNCTIONS 0
#define VMA_DYNAMIC_VULKAN_FUNCTIONS 1
#include "vma/vk_mem_alloc.h"

#define VOLK_IMPLEMENTATION
#include <volk/volk.h>

#include <SDL2/SDL.h>
#include "SDL2/SDL_vulkan.h"
#include "VBBInstance.h"
#include "VBBPhysicalDevices.h"
#include "VBBCanvas.h"
#include "VBBPipelineGraphics.h"
#include "VBBBufferDynamic.h"
#include "VBBBufferStatic.h"
#include "VBBUtils.h"
#include "VBBDescriptors.h"

#include <glm/glm.hpp>
#include <glm/ext.hpp>

VBBPipelineGraphics*    pPipeline = nullptr;
VBBBufferDynamic*       pVertexBuffer = nullptr;
VBBBufferDynamic*       pNormalBuffer = nullptr;
VBBBufferDynamic*       pTexCoordBuffer = nullptr;
VBBBufferStatic*        pIndexBuffer = nullptr;
VBBDescriptors*         pDescriptors = nullptr;

static int screen_w, screen_h;

uint32_t indexCount = 0;
uint32_t attribCount = 0;


unsigned char StockShader_FakeLight_vert_spv[] = {
    0x03, 0x02, 0x23, 0x07, 0x00, 0x00, 0x01, 0x00, 0x0b, 0x00, 0x0d, 0x00,
    0x4e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x02, 0x00,
    0x01, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x06, 0x00, 0x01, 0x00, 0x00, 0x00,
    0x47, 0x4c, 0x53, 0x4c, 0x2e, 0x73, 0x74, 0x64, 0x2e, 0x34, 0x35, 0x30,
    0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x01, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x04, 0x00, 0x00, 0x00, 0x6d, 0x61, 0x69, 0x6e, 0x00, 0x00, 0x00, 0x00,
    0x31, 0x00, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00, 0x39, 0x00, 0x00, 0x00,
    0x42, 0x00, 0x00, 0x00, 0x46, 0x00, 0x00, 0x00, 0x03, 0x00, 0x03, 0x00,
    0x02, 0x00, 0x00, 0x00, 0xc2, 0x01, 0x00, 0x00, 0x04, 0x00, 0x0a, 0x00,
    0x47, 0x4c, 0x5f, 0x47, 0x4f, 0x4f, 0x47, 0x4c, 0x45, 0x5f, 0x63, 0x70,
    0x70, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x65,
    0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x00, 0x00,
    0x04, 0x00, 0x08, 0x00, 0x47, 0x4c, 0x5f, 0x47, 0x4f, 0x4f, 0x47, 0x4c,
    0x45, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x64, 0x69,
    0x72, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x00, 0x05, 0x00, 0x04, 0x00,
    0x04, 0x00, 0x00, 0x00, 0x6d, 0x61, 0x69, 0x6e, 0x00, 0x00, 0x00, 0x00,
    0x05, 0x00, 0x03, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x72, 0x6f, 0x74, 0x00,
    0x05, 0x00, 0x03, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x50, 0x43, 0x00, 0x00,
    0x06, 0x00, 0x06, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x6d, 0x76, 0x70, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x00, 0x00, 0x00,
    0x06, 0x00, 0x05, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
    0x70, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x00, 0x00, 0x05, 0x00, 0x06, 0x00,
    0x0f, 0x00, 0x00, 0x00, 0x50, 0x75, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x73,
    0x74, 0x61, 0x6e, 0x74, 0x73, 0x00, 0x00, 0x00, 0x05, 0x00, 0x04, 0x00,
    0x31, 0x00, 0x00, 0x00, 0x76, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x00,
    0x05, 0x00, 0x05, 0x00, 0x34, 0x00, 0x00, 0x00, 0x69, 0x6e, 0x4e, 0x6f,
    0x72, 0x6d, 0x61, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x04, 0x00,
    0x39, 0x00, 0x00, 0x00, 0x76, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x00, 0x00,
    0x05, 0x00, 0x06, 0x00, 0x40, 0x00, 0x00, 0x00, 0x67, 0x6c, 0x5f, 0x50,
    0x65, 0x72, 0x56, 0x65, 0x72, 0x74, 0x65, 0x78, 0x00, 0x00, 0x00, 0x00,
    0x06, 0x00, 0x06, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x67, 0x6c, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x00,
    0x06, 0x00, 0x07, 0x00, 0x40, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
    0x67, 0x6c, 0x5f, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x69, 0x7a, 0x65,
    0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x07, 0x00, 0x40, 0x00, 0x00, 0x00,
    0x02, 0x00, 0x00, 0x00, 0x67, 0x6c, 0x5f, 0x43, 0x6c, 0x69, 0x70, 0x44,
    0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x00, 0x06, 0x00, 0x07, 0x00,
    0x40, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x67, 0x6c, 0x5f, 0x43,
    0x75, 0x6c, 0x6c, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x00,
    0x05, 0x00, 0x03, 0x00, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x05, 0x00, 0x05, 0x00, 0x46, 0x00, 0x00, 0x00, 0x69, 0x6e, 0x50, 0x6f,
    0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x00, 0x00, 0x48, 0x00, 0x04, 0x00,
    0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
    0x48, 0x00, 0x05, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00,
    0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
    0x10, 0x00, 0x00, 0x00, 0x48, 0x00, 0x04, 0x00, 0x0d, 0x00, 0x00, 0x00,
    0x01, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00,
    0x0d, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00,
    0x40, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00, 0x0d, 0x00, 0x00, 0x00,
    0x01, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
    0x47, 0x00, 0x03, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
    0x47, 0x00, 0x04, 0x00, 0x31, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00,
    0x01, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x34, 0x00, 0x00, 0x00,
    0x1e, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00,
    0x39, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x48, 0x00, 0x05, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00,
    0x40, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00,
    0x01, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00, 0x40, 0x00, 0x00, 0x00,
    0x02, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
    0x48, 0x00, 0x05, 0x00, 0x40, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
    0x0b, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x47, 0x00, 0x03, 0x00,
    0x40, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00,
    0x46, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x13, 0x00, 0x02, 0x00, 0x02, 0x00, 0x00, 0x00, 0x21, 0x00, 0x03, 0x00,
    0x03, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x16, 0x00, 0x03, 0x00,
    0x06, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x17, 0x00, 0x04, 0x00,
    0x07, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
    0x18, 0x00, 0x04, 0x00, 0x08, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
    0x03, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x09, 0x00, 0x00, 0x00,
    0x07, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x17, 0x00, 0x04, 0x00,
    0x0b, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
    0x18, 0x00, 0x04, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00,
    0x04, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x04, 0x00, 0x0d, 0x00, 0x00, 0x00,
    0x0c, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00,
    0x0e, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00,
    0x3b, 0x00, 0x04, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00,
    0x09, 0x00, 0x00, 0x00, 0x15, 0x00, 0x04, 0x00, 0x10, 0x00, 0x00, 0x00,
    0x20, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00,
    0x10, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
    0x2b, 0x00, 0x04, 0x00, 0x10, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x13, 0x00, 0x00, 0x00,
    0x09, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00,
    0x10, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
    0x2b, 0x00, 0x04, 0x00, 0x06, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x80, 0x3f, 0x2b, 0x00, 0x04, 0x00, 0x06, 0x00, 0x00, 0x00,
    0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00,
    0x30, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
    0x3b, 0x00, 0x04, 0x00, 0x30, 0x00, 0x00, 0x00, 0x31, 0x00, 0x00, 0x00,
    0x03, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x33, 0x00, 0x00, 0x00,
    0x01, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00,
    0x33, 0x00, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
    0x20, 0x00, 0x04, 0x00, 0x38, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
    0x0b, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x38, 0x00, 0x00, 0x00,
    0x39, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00,
    0x10, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
    0x15, 0x00, 0x04, 0x00, 0x3d, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x3d, 0x00, 0x00, 0x00,
    0x3e, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x04, 0x00,
    0x3f, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00,
    0x1e, 0x00, 0x06, 0x00, 0x40, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00,
    0x06, 0x00, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x00,
    0x20, 0x00, 0x04, 0x00, 0x41, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
    0x40, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x41, 0x00, 0x00, 0x00,
    0x42, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00,
    0x43, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00,
    0x3b, 0x00, 0x04, 0x00, 0x33, 0x00, 0x00, 0x00, 0x46, 0x00, 0x00, 0x00,
    0x01, 0x00, 0x00, 0x00, 0x36, 0x00, 0x05, 0x00, 0x02, 0x00, 0x00, 0x00,
    0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
    0xf8, 0x00, 0x02, 0x00, 0x05, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00,
    0x09, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
    0x41, 0x00, 0x06, 0x00, 0x13, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00,
    0x0f, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00,
    0x3d, 0x00, 0x04, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x00,
    0x14, 0x00, 0x00, 0x00, 0x4f, 0x00, 0x08, 0x00, 0x07, 0x00, 0x00, 0x00,
    0x16, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
    0x0c, 0x00, 0x06, 0x00, 0x07, 0x00, 0x00, 0x00, 0x17, 0x00, 0x00, 0x00,
    0x01, 0x00, 0x00, 0x00, 0x45, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00,
    0x41, 0x00, 0x06, 0x00, 0x13, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,
    0x0f, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00,
    0x3d, 0x00, 0x04, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00,
    0x18, 0x00, 0x00, 0x00, 0x4f, 0x00, 0x08, 0x00, 0x07, 0x00, 0x00, 0x00,
    0x1a, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
    0x0c, 0x00, 0x06, 0x00, 0x07, 0x00, 0x00, 0x00, 0x1b, 0x00, 0x00, 0x00,
    0x01, 0x00, 0x00, 0x00, 0x45, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00,
    0x41, 0x00, 0x06, 0x00, 0x13, 0x00, 0x00, 0x00, 0x1d, 0x00, 0x00, 0x00,
    0x0f, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00,
    0x3d, 0x00, 0x04, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00,
    0x1d, 0x00, 0x00, 0x00, 0x4f, 0x00, 0x08, 0x00, 0x07, 0x00, 0x00, 0x00,
    0x1f, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
    0x0c, 0x00, 0x06, 0x00, 0x07, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
    0x01, 0x00, 0x00, 0x00, 0x45, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00,
    0x51, 0x00, 0x05, 0x00, 0x06, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00,
    0x17, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00,
    0x06, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x17, 0x00, 0x00, 0x00,
    0x01, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x06, 0x00, 0x00, 0x00,
    0x25, 0x00, 0x00, 0x00, 0x17, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
    0x51, 0x00, 0x05, 0x00, 0x06, 0x00, 0x00, 0x00, 0x26, 0x00, 0x00, 0x00,
    0x1b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00,
    0x06, 0x00, 0x00, 0x00, 0x27, 0x00, 0x00, 0x00, 0x1b, 0x00, 0x00, 0x00,
    0x01, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x06, 0x00, 0x00, 0x00,
    0x28, 0x00, 0x00, 0x00, 0x1b, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
    0x51, 0x00, 0x05, 0x00, 0x06, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00,
    0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00,
    0x06, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
    0x01, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x06, 0x00, 0x00, 0x00,
    0x2b, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
    0x50, 0x00, 0x06, 0x00, 0x07, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00,
    0x23, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00,
    0x50, 0x00, 0x06, 0x00, 0x07, 0x00, 0x00, 0x00, 0x2d, 0x00, 0x00, 0x00,
    0x26, 0x00, 0x00, 0x00, 0x27, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00,
    0x50, 0x00, 0x06, 0x00, 0x07, 0x00, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x00,
    0x29, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x00, 0x00,
    0x50, 0x00, 0x06, 0x00, 0x08, 0x00, 0x00, 0x00, 0x2f, 0x00, 0x00, 0x00,
    0x2c, 0x00, 0x00, 0x00, 0x2d, 0x00, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x00,
    0x3e, 0x00, 0x03, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x2f, 0x00, 0x00, 0x00,
    0x3d, 0x00, 0x04, 0x00, 0x08, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00,
    0x0a, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00,
    0x35, 0x00, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x06, 0x00,
    0x07, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
    0x45, 0x00, 0x00, 0x00, 0x35, 0x00, 0x00, 0x00, 0x91, 0x00, 0x05, 0x00,
    0x07, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00,
    0x36, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x03, 0x00, 0x31, 0x00, 0x00, 0x00,
    0x37, 0x00, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0x13, 0x00, 0x00, 0x00,
    0x3b, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00,
    0x3a, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x0b, 0x00, 0x00, 0x00,
    0x3c, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x03, 0x00,
    0x39, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x41, 0x00, 0x05, 0x00,
    0x43, 0x00, 0x00, 0x00, 0x44, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00,
    0x12, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x0c, 0x00, 0x00, 0x00,
    0x45, 0x00, 0x00, 0x00, 0x44, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00,
    0x07, 0x00, 0x00, 0x00, 0x47, 0x00, 0x00, 0x00, 0x46, 0x00, 0x00, 0x00,
    0x51, 0x00, 0x05, 0x00, 0x06, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00,
    0x47, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00,
    0x06, 0x00, 0x00, 0x00, 0x49, 0x00, 0x00, 0x00, 0x47, 0x00, 0x00, 0x00,
    0x01, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x06, 0x00, 0x00, 0x00,
    0x4a, 0x00, 0x00, 0x00, 0x47, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
    0x50, 0x00, 0x07, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x4b, 0x00, 0x00, 0x00,
    0x48, 0x00, 0x00, 0x00, 0x49, 0x00, 0x00, 0x00, 0x4a, 0x00, 0x00, 0x00,
    0x21, 0x00, 0x00, 0x00, 0x91, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00,
    0x4c, 0x00, 0x00, 0x00, 0x45, 0x00, 0x00, 0x00, 0x4b, 0x00, 0x00, 0x00,
    0x41, 0x00, 0x05, 0x00, 0x38, 0x00, 0x00, 0x00, 0x4d, 0x00, 0x00, 0x00,
    0x42, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x03, 0x00,
    0x4d, 0x00, 0x00, 0x00, 0x4c, 0x00, 0x00, 0x00, 0xfd, 0x00, 0x01, 0x00,
    0x38, 0x00, 0x01, 0x00
};
unsigned int StockShader_FakeLight_vert_spv_len = 2272;

/*
#version 450
// Fake light... just shades geometry as if the light were coming
// from the viewer. It's just a simple default 3D effect. Requires
// geometry have surface normals, and a solid color.


layout(location = 0) in vec4 vColor;
layout(location = 1) in vec3 vNormal;


// Output color
layout(location = 0) out vec4 vFragColor;

void main(void) {
     vec3 vLightDir = vec3(0.0, 0.0, 1.0); // Always from view direction

    // This lights the back as well as the front
    float fDot = abs(dot(vLightDir, vNormal));

    vFragColor = vec4(fDot, fDot, fDot, 1.0) * vColor;
    }
 */

unsigned char StockShader_FakeLight_frag_spv[] = {
    0x03, 0x02, 0x23, 0x07, 0x00, 0x00, 0x01, 0x00, 0x0b, 0x00, 0x0d, 0x00,
    0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x02, 0x00,
    0x01, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x06, 0x00, 0x01, 0x00, 0x00, 0x00,
    0x47, 0x4c, 0x53, 0x4c, 0x2e, 0x73, 0x74, 0x64, 0x2e, 0x34, 0x35, 0x30,
    0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x01, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x08, 0x00, 0x04, 0x00, 0x00, 0x00,
    0x04, 0x00, 0x00, 0x00, 0x6d, 0x61, 0x69, 0x6e, 0x00, 0x00, 0x00, 0x00,
    0x11, 0x00, 0x00, 0x00, 0x17, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00,
    0x10, 0x00, 0x03, 0x00, 0x04, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
    0x03, 0x00, 0x03, 0x00, 0x02, 0x00, 0x00, 0x00, 0xc2, 0x01, 0x00, 0x00,
    0x04, 0x00, 0x0a, 0x00, 0x47, 0x4c, 0x5f, 0x47, 0x4f, 0x4f, 0x47, 0x4c,
    0x45, 0x5f, 0x63, 0x70, 0x70, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f,
    0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
    0x76, 0x65, 0x00, 0x00, 0x04, 0x00, 0x08, 0x00, 0x47, 0x4c, 0x5f, 0x47,
    0x4f, 0x4f, 0x47, 0x4c, 0x45, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
    0x65, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x00,
    0x05, 0x00, 0x04, 0x00, 0x04, 0x00, 0x00, 0x00, 0x6d, 0x61, 0x69, 0x6e,
    0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x05, 0x00, 0x09, 0x00, 0x00, 0x00,
    0x76, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x44, 0x69, 0x72, 0x00, 0x00, 0x00,
    0x05, 0x00, 0x04, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x66, 0x44, 0x6f, 0x74,
    0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x04, 0x00, 0x11, 0x00, 0x00, 0x00,
    0x76, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x00, 0x05, 0x00, 0x05, 0x00,
    0x17, 0x00, 0x00, 0x00, 0x76, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c,
    0x6f, 0x72, 0x00, 0x00, 0x05, 0x00, 0x04, 0x00, 0x1e, 0x00, 0x00, 0x00,
    0x76, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00,
    0x11, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
    0x47, 0x00, 0x04, 0x00, 0x17, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x1e, 0x00, 0x00, 0x00,
    0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0x00, 0x02, 0x00,
    0x02, 0x00, 0x00, 0x00, 0x21, 0x00, 0x03, 0x00, 0x03, 0x00, 0x00, 0x00,
    0x02, 0x00, 0x00, 0x00, 0x16, 0x00, 0x03, 0x00, 0x06, 0x00, 0x00, 0x00,
    0x20, 0x00, 0x00, 0x00, 0x17, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00,
    0x06, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00,
    0x08, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
    0x2b, 0x00, 0x04, 0x00, 0x06, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x06, 0x00, 0x00, 0x00,
    0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xbf, 0x2c, 0x00, 0x06, 0x00,
    0x07, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00,
    0x0a, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00,
    0x0d, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00,
    0x20, 0x00, 0x04, 0x00, 0x10, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
    0x07, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x10, 0x00, 0x00, 0x00,
    0x11, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x17, 0x00, 0x04, 0x00,
    0x15, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
    0x20, 0x00, 0x04, 0x00, 0x16, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
    0x15, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x16, 0x00, 0x00, 0x00,
    0x17, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00,
    0x06, 0x00, 0x00, 0x00, 0x1b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f,
    0x20, 0x00, 0x04, 0x00, 0x1d, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
    0x15, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x1d, 0x00, 0x00, 0x00,
    0x1e, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x36, 0x00, 0x05, 0x00,
    0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x03, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x05, 0x00, 0x00, 0x00,
    0x3b, 0x00, 0x04, 0x00, 0x08, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00,
    0x07, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x0d, 0x00, 0x00, 0x00,
    0x0e, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x03, 0x00,
    0x09, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00,
    0x07, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00,
    0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00,
    0x11, 0x00, 0x00, 0x00, 0x94, 0x00, 0x05, 0x00, 0x06, 0x00, 0x00, 0x00,
    0x13, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00,
    0x0c, 0x00, 0x06, 0x00, 0x06, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00,
    0x01, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00,
    0x3e, 0x00, 0x03, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00,
    0x3d, 0x00, 0x04, 0x00, 0x06, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,
    0x0e, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x06, 0x00, 0x00, 0x00,
    0x19, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00,
    0x06, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00,
    0x50, 0x00, 0x07, 0x00, 0x15, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00,
    0x18, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00,
    0x1b, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x15, 0x00, 0x00, 0x00,
    0x1f, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00,
    0x15, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00,
    0x1f, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x03, 0x00, 0x17, 0x00, 0x00, 0x00,
    0x20, 0x00, 0x00, 0x00, 0xfd, 0x00, 0x01, 0x00, 0x38, 0x00, 0x01, 0x00
};
unsigned int StockShader_FakeLight_frag_spv_len = 900;


// Uniform (push constant actually)
struct pushConstantDef {
    float mvp[16];
    float packMatrix[16]; // 3x3 normal matrix, with color in last column
};


void DrawFrame(VkCommandBuffer cmdBuffer)
{
    
    // Bind to the pipeline that we want to use
    vkCmdBindPipeline(cmdBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, pPipeline->getPipeline());

    // Red lines
    pushConstantDef pc;

    glm::mat4   modelView(1);
    modelView = glm::translate(modelView, glm::vec3(0.0f, 0.0f, -7.0f));

    static float yRot = 0.0f;
    yRot += 0.01f;

    modelView = glm::rotate(modelView, yRot, glm::vec3(0.0f, 1.0f, 0.0f));

    glm::mat4 proj = glm::perspective ( glm::radians (45.0f), (float)screen_w/(float)screen_h, 0.1f, 100.0f);
    glm::mat4 mvp = proj * modelView;
    memcpy(pc.mvp, glm::value_ptr(mvp), sizeof(float)*16);

    // Used to transform normals
    pc.packMatrix[0] = glm::value_ptr(modelView)[0];
    pc.packMatrix[1] = glm::value_ptr(modelView)[1];
    pc.packMatrix[2] = glm::value_ptr(modelView)[2];

    pc.packMatrix[4] = glm::value_ptr(modelView)[4];
    pc.packMatrix[5] = glm::value_ptr(modelView)[5];
    pc.packMatrix[6] = glm::value_ptr(modelView)[6];

    pc.packMatrix[8] = glm::value_ptr(modelView)[8];
    pc.packMatrix[9] = glm::value_ptr(modelView)[9];
    pc.packMatrix[10] = glm::value_ptr(modelView)[10];

    // Store color of object
    pc.packMatrix[12] = 1.0f;
    pc.packMatrix[13] = 0.1f;
    pc.packMatrix[14] = 0.4f;
    pc.packMatrix[15] = 1.0f;

    vkCmdPushConstants(cmdBuffer, pPipeline->getPipelineLayout(), VK_SHADER_STAGE_VERTEX_BIT, 0, sizeof(pushConstantDef), &pc);

    // Bind to geometry attribute data and draw
    VkBuffer vertexBuffers[] = { pVertexBuffer->getBuffer() };
    VkDeviceSize offsets[] = {0};
    vkCmdBindVertexBuffers(cmdBuffer, 0, 1, vertexBuffers, offsets);

    VkBuffer normalBuffers[] = { pNormalBuffer->getBuffer() };
    vkCmdBindVertexBuffers(cmdBuffer, 1, 1, normalBuffers, offsets);

    vkCmdBindIndexBuffer(cmdBuffer, pIndexBuffer->getBuffer(), 0, VK_INDEX_TYPE_UINT16);

    vkCmdDrawIndexed(cmdBuffer, indexCount, 1, 0, 0, 0);

    
}


// *************************************************************************************
void printInstanceExtensions(VBBInstance& vulkanInstance)
{
    const std::vector<VkLayerProperties>& layers = vulkanInstance.getLayerProperties();
    
    // List layers found
    for(uint32_t i = 0; i < layers.size(); i++)
        std::cout << "Vulkan layer found: " << layers[i].layerName << std::endl;
}

// *************************************************************************************
void printFoundLayers(VBBInstance& vulkanInstance)
{
    const std::vector<VkExtensionProperties>& extensions = vulkanInstance.getExtensionProperties();
    
    // List instance extensions found
    for(uint32_t i = 0; i < extensions.size(); i++)
        std::cout << "Vulkan instance extension found: " << extensions[i].extensionName << std::endl;
}

// *************************************************************************************
void printInstanceVersion(VBBInstance& vulkanInstance)
{
    uint32_t major, minor, patch;
    vulkanInstance.getInstanceVersion(major, minor, patch);
    std::cout << "Instance version: " << major << "." << minor << "." << patch << std::endl;
    
    if(vulkanInstance.createInstance(VK_TRUE))
        std::cout << "Created Vulkan instance." << std::endl;
    else
        std::cout << "Error code " << vulkanInstance.getLastResult() << " trying to create Vulkan instance." << std::endl;
}

// *************************************************************************************
void listDevices(VBBPhysicalDevices& vulkanDevices)
{
    const std::vector<VkPhysicalDeviceProperties2> &deviceProperties = vulkanDevices.getDeviceProperties();
    for(int32_t i = 0; i < deviceProperties.size(); i++) {
        std::cout << "Device " << i << ": " << deviceProperties[i].properties.deviceName << std::endl;
        
        uint32_t major, minor, patch;
        vulkanDevices.getAPIVersion(i, major, minor, patch);
        std::cout << "API Version: " << major << "." << minor << "." << patch << std::endl;
        
        vulkanDevices.getDriverVersion(i, major, minor, patch);
        std::cout << "Driver Version: " << major << "." << minor << "." << patch << std::endl;
        
        std::cout << "Device Extensions:" << std::endl;
        
        for(int j = 0; j < vulkanDevices.getDeviceExtensionProperties(i).size(); j++)
            std::cout << vulkanDevices.getDeviceExtensionProperties(i)[j].extensionName << std::endl;
    }
}



int main(int argc, char *argv[]) {
    
    VkResult result = volkInitialize();
    printf("Result = %d\n", result);
    

    VBBInstance          vulkanInstance;

    // Create the vulkan instance and display what's going on
    if(vulkanInstance.getLastResult() != VK_SUCCESS) {
        std::cout << "Error querying Vulkan instance properties." << std::endl;
        return -1;
    }
    

    printInstanceExtensions(vulkanInstance);
    printFoundLayers(vulkanInstance);
        
    // We need this extension whenever we are planning to do any rendering
    vulkanInstance.addRequiredExtension(VK_KHR_SURFACE_EXTENSION_NAME);
        
    // We need this for Apple desktop and mobile devices
    vulkanInstance.addRequiredExtension("VK_EXT_metal_surface");
        
    // We need this for our layer demo
    //vulkanInstance.addRequiredLayer("VK_LAYER_LUNARG_api_dump");
    //vulkanInstance.addRequiredLayer("VK_LAYER_KHRONOS_validation");
    
    // Create the actual instance
    if(VK_SUCCESS != vulkanInstance.createInstance(VK_TRUE)) {
        std::cout << "Error creating Vulkan Instance. Error " << vulkanInstance.getLastResult() << std::endl;
        return -1;
    }
    
    volkLoadInstance(vulkanInstance.getInstance());

    // Create the Vulkan devices object. This is a list of all physical devices and their properties
    VBBPhysicalDevices vulkanDevices(vulkanInstance.getInstance());
    
    if(vulkanDevices.getDeviceCount() == 0) {
        std::cout << "No devices found that match instance criteria." << std::endl;
        return -1;
    }
    
    // List all devices found
    listDevices(vulkanDevices);
    
    // Create empty instance of a logical device and configure it
    VBBDevice logicalDevice(vulkanInstance.getInstance());
    logicalDevice.addRequiredDeviceExtension("VK_KHR_portability_subset");  // Must have on macOS/iOS
    logicalDevice.addRequiredDeviceExtension("VK_KHR_swapchain");           // Must always have for drawing
    
    // Try to create the logical device
    if(VK_SUCCESS != vulkanDevices.createLogicalDevice(logicalDevice)) {
        std::cout << "Could not create logical device." << std::endl;
        return -1;
        }
    
    
    VkSurfaceKHR        surface = 0;
    
    SDL_Window *window;         /* main window */

    /* initialize SDL */
    if (SDL_Init(SDL_INIT_VIDEO) < 0)
        return -1;
    
        
    //SDL_SetEventFilter(HandleAppEvents, NULL);

    window = SDL_CreateWindow(NULL, 100, 100, 1024, 768,
                              SDL_WINDOW_VULKAN | SDL_WINDOW_BORDERLESS | SDL_WINDOW_ALLOW_HIGHDPI);
    
    //SDL_SetWindowFullscreen(window ,SDL_WINDOW_FULLSCREEN_DESKTOP);// SDL_WINDOW_FULLSCREEN); // SDK_WINDOW_FULLSCREEN_DESKTOP
    
    // This comes back zero for the surface, and API dump does not show a singled Vulkan call made by SDL framework,
    // and probably because SDL want's to pick a device
    SDL_Vulkan_CreateSurface(window, vulkanInstance.getInstance(), &surface);
    
    
    SDL_GetWindowSize(window, &screen_w, &screen_h);
    printf("Screen size is %d x %d\n", screen_w, screen_h);
    
    int drawableW, drawableH;
    SDL_Vulkan_GetDrawableSize(window, &drawableW, &drawableH);
    printf("Drawable size: %d x %d\n", drawableW, drawableH);
    
    
    VmaVulkanFunctions vulkanFunctions = {};
    vulkanFunctions.vkGetInstanceProcAddr = vkGetInstanceProcAddr;
    vulkanFunctions.vkGetDeviceProcAddr = vkGetDeviceProcAddr;

    VmaAllocatorCreateInfo allocatorCreateInfo = {};
    allocatorCreateInfo.vulkanApiVersion = VK_API_VERSION_1_1;
    allocatorCreateInfo.physicalDevice = logicalDevice.getPhysicalDeviceHandle();
    allocatorCreateInfo.device = logicalDevice.getDevice();
    allocatorCreateInfo.instance = vulkanInstance.getInstance();
    allocatorCreateInfo.pVulkanFunctions = &vulkanFunctions;
    
    VmaAllocator Allocator;
    vmaCreateAllocator(&allocatorCreateInfo, &Allocator);
    
    VBBCanvas *pVulkanCanvas = new VBBCanvas(&logicalDevice, Allocator);
    pVulkanCanvas->setViewportFlip(VK_TRUE);
    pVulkanCanvas->setWantDepthStencil(VK_TRUE);
    pVulkanCanvas->setMSAA(VK_SAMPLE_COUNT_1_BIT);

    pVulkanCanvas->setPresentMode(VK_PRESENT_MODE_IMMEDIATE_KHR); // No vsync wait (if supported)
    pVulkanCanvas->setBlocking(VK_FALSE);
    pVulkanCanvas->setFramesInFlight(3);
    
    pVulkanCanvas->createCanvas(surface, drawableW, drawableH);
    
    pPipeline = new VBBPipelineGraphics();
    
    // What does the attribute data look like, and what is it's location
     pPipeline->addVertexAttributeBinding(sizeof(float)*3, VK_VERTEX_INPUT_RATE_VERTEX, 0, VK_FORMAT_R32G32B32_SFLOAT);
     pPipeline->addVertexAttributeBinding(sizeof(float)*3, VK_VERTEX_INPUT_RATE_VERTEX, 1, VK_FORMAT_R32G32B32_SFLOAT);

     // Push constants are SO FREAKING EASY
     VkPushConstantRange pushConstant;
     pushConstant.offset = 0;
     pushConstant.size = (sizeof(pushConstantDef));
     pushConstant.stageFlags = VK_SHADER_STAGE_VERTEX_BIT;

     VBBShaderModule vertexShader;
     vertexShader.loadShaderSPIRV(pVulkanCanvas->getLogicalDevice(), StockShader_FakeLight_vert_spv, StockShader_FakeLight_vert_spv_len);

     VBBShaderModule fragmentShader;
     fragmentShader.loadShaderSPIRV(pVulkanCanvas->getLogicalDevice(), StockShader_FakeLight_frag_spv, StockShader_FakeLight_frag_spv_len);

     pPipeline->setPushConstants(1, &pushConstant);

     pPipeline->setPrimitiveTopology(VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST);
     pPipeline->setFrontFace(VK_FRONT_FACE_COUNTER_CLOCKWISE);
     pPipeline->setCullMode(VK_CULL_MODE_BACK_BIT);
     pPipeline->setPolygonMode(VK_POLYGON_MODE_FILL);
     pPipeline->setEnableDepthTest(VK_TRUE);
     pPipeline->setEnableDepthWrite(VK_TRUE);

     VkResult lastResult = pPipeline->createPipeline(pVulkanCanvas, &vertexShader, &fragmentShader);
     if(lastResult != VK_SUCCESS)
         return lastResult;


    indexCount = 0;
    attribCount = 0;


     // Build a mesh
     VBBSimpleIndexedMesh torus;
     VBBMakeTorus(torus, 1.0f, 0.3, 99, 49);
     //VBBMakeSphere(torus, 1.0f, 52, 26);
     //VBBMakeCylinder(torus, 1.0f, 1.0f, 2.0f, 50, 100);
     //VBBMakeDisk(torus, 0.0f, 1.0f, 55, 2);

     indexCount = torus.getIndexCount();
     attribCount = torus.getAttributeCount();

     pVertexBuffer = new VBBBufferDynamic(Allocator);
     pVertexBuffer->createBuffer(sizeof(float)*3*attribCount);
     void* pMapped = pVertexBuffer->mapMemory();
     memcpy(pMapped, torus.getVertexPointer(), sizeof(float)*3*attribCount);
     pVertexBuffer->unmapMemory();

     pNormalBuffer = new VBBBufferDynamic(Allocator);
     pNormalBuffer->createBuffer(sizeof(float)*3*attribCount);
     pMapped = pNormalBuffer->mapMemory();
     memcpy(pMapped, torus.getNomrlaPointer(), sizeof(float)*3*attribCount);
     pNormalBuffer->unmapMemory();

     pTexCoordBuffer = new VBBBufferDynamic(Allocator);
     pTexCoordBuffer->createBuffer(sizeof(float)*2*attribCount);
     pMapped = pTexCoordBuffer->mapMemory();
     memcpy(pMapped, torus.getTexCoordPonter(), sizeof(float)*2*attribCount);
     pTexCoordBuffer->unmapMemory();

     pIndexBuffer = new VBBBufferStatic(Allocator);
     pIndexBuffer->createBuffer(torus.getIndexPointer(), sizeof(uint16_t)*indexCount, logicalDevice);
    SDL_Event event;
    bool bDone = false;
    while (!bDone) {
        SDL_PollEvent(&event);
        if (event.type == SDL_QUIT) {
            bDone = true;
            }
        
        // We can't render in the background, so just go ahead and terminate
        if(event.type == SDL_APP_WILLENTERBACKGROUND || event.type == SDL_APP_TERMINATING)
            bDone = true;
        
        VkCommandBuffer cmdBuffer = pVulkanCanvas->startRendering();
        DrawFrame(cmdBuffer);
        pVulkanCanvas->doneRendering();

        //SDL_Delay(1);
        }

    delete pVulkanCanvas;

    delete pPipeline;
    delete pVertexBuffer;
    delete pNormalBuffer;
    delete pTexCoordBuffer;

    delete pIndexBuffer;
    delete pDescriptors;
    vkDestroySurfaceKHR(vulkanInstance.getInstance(), surface, nullptr);

    SDL_Quit();
    
    // Why do I have to do this? On iOS, the process does not actually terminate, it just "hides",
    // but the next time you try and "run" it, it comes up empty because it's still "running", but past
    // the above loop.
    exit(0);
    return 0;
}
